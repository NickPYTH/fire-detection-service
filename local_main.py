import cv2
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from ultralytics import YOLO
import time
from datetime import datetime
import numpy as np
import requests
import base64
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    # –ú–æ–¥–µ–ª—å YOLO
    YOLO_MODEL = "best.pt"  # –í–∞—à–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP
    SMTP_SERVER = "smtp.timeweb.ru"
    SMTP_PORT = 587
    EMAIL = "admin@ar-ucheba.ru"
    PASSWORD = "gxgmsdt4s9"  # –ü–∞—Ä–æ–ª—å –¥–ª—è SMTP
    ALERT_EMAIL = "nicksrnk@gmail.com"  # –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django API
    DJANGO_API_URL = "http://127.0.0.1:8000/api/fire-detection/"
    API_TIMEOUT = 5  # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    ALERT_COOLDOWN = 300  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (5 –º–∏–Ω—É—Ç)
    CONFIDENCE_THRESHOLD = 0.5  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
model = YOLO(Config.YOLO_MODEL)
last_alert_time = 0

def prepare_alert_data(frame, confidence, coordinates):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
    timestamp = datetime.now().isoformat()
    frame_data = base64.b64encode(cv2.imencode('.jpg', frame)[1]).decode('utf-8')
    
    return {
        "frame": frame_data,
        "confidence": float(confidence),
        "detection_type": "fire",
        "coordinates": coordinates,
        "timestamp": timestamp  # –Ø–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    }

# –í –≤–∞—à–µ–º —Å–∫—Ä–∏–ø—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
def send_to_django(alert_data):
    try:
        response = requests.post(
            Config.DJANGO_API_URL,
            json={
                "frame": f"data:image/jpeg;base64,{alert_data['frame']}",
                "confidence": alert_data["confidence"],
                "detection_type": alert_data["detection_type"],
                "coordinates": alert_data["coordinates"]
            },
            headers={'Content-Type': 'application/json'},
            timeout=Config.API_TIMEOUT
        )
        return response.json()
    except Exception as e:
        print(f"Django API Error: {str(e)}")
        return None

def send_email_alert(alert_data, django_response):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∂–∞—Ä–µ"""
    try:
        msg = MIMEMultipart()
        msg["From"] = Config.EMAIL
        msg["To"] = Config.ALERT_EMAIL
        msg["Subject"] = f"üö® –ü–û–ñ–ê–† –û–ë–ù–ê–†–£–ñ–ï–ù ({alert_data['detection_type']})"
        
        # –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        body = f"""
        <h2>–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–∂–∞—Ä–æ–≤</h2>
        <p><strong>–¢–∏–ø:</strong> {alert_data['detection_type']}</p>
        <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> {alert_data['confidence']:.2%}</p>
        <p><strong>–í—Ä–µ–º—è:</strong> {datetime.fromisoformat(alert_data['timestamp']).strftime('%Y-%m-%d %H:%M:%S')}</p>
        <p><strong>ID —Å–æ–±—ã—Ç–∏—è:</strong> {django_response.get('event_id', 'N/A')}</p>
        <img src="cid:fire_image" style="max-width:600px;border:1px solid #ddd">
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_data = base64.b64decode(alert_data['frame'])
        image = MIMEImage(img_data)
        image.add_header('Content-ID', '<fire_image>')
        msg.attach(image)
        msg.attach(MIMEText(body, 'html'))
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞
        with smtplib.SMTP(Config.SMTP_SERVER, Config.SMTP_PORT) as server:
            server.starttls()
            server.login(Config.EMAIL, Config.PASSWORD)
            server.send_message(msg)
        
        print("Email alert sent successfully!")
        return True
    except Exception as e:
        print(f"Email Error: {str(e)}")
        return False

def process_detection(frame, box):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–∂–∞—Ä–∞"""
    global last_alert_time
    
    coordinates = {
        'x1': int(box.xyxy[0][0]),
        'y1': int(box.xyxy[0][1]),
        'x2': int(box.xyxy[0][2]),
        'y2': int(box.xyxy[0][3])
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    current_time = time.time()
    if current_time - last_alert_time < Config.ALERT_COOLDOWN:
        print(f"–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –û—Å—Ç–∞–ª–æ—Å—å: {Config.ALERT_COOLDOWN - (current_time - last_alert_time):.0f} —Å–µ–∫.")
        return False
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    alert_data = prepare_alert_data(
        frame=frame,
        confidence=float(box.conf[0]),
        coordinates=coordinates
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Django
    django_response = send_to_django(alert_data)
    if not django_response:
        return False
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ email
    if send_email_alert(alert_data, django_response):
        last_alert_time = current_time
        return True
    return False

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
def main():
    cap = cv2.VideoCapture("fire_video.mp4")
    
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        
        # –î–µ—Ç–µ–∫—Ü–∏—è
        results = model(frame, classes=[0], conf=0.5)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for result in results:
            for box in result.boxes:
                if box.conf[0] > 0.5:
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                    x1, y1, x2, y2 = map(int, box.xyxy[0])
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 2)
                    label = f"Fire {box.conf[0]:.2f}"
                    cv2.putText(frame, label, (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                    process_detection(frame.copy(), box)
        
        cv2.imshow("Fire Detection", frame)
        if cv2.waitKey(1) == ord('q'):
            break
    
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()