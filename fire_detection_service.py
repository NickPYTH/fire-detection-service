import cv2
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from ultralytics import YOLO
import time
from datetime import datetime
import numpy as np
import requests
import base64
import json
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('fire_detection.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FireDetectionService:
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            'YOLO_MODEL': 'best.pt',
            'SMTP_SERVER': 'smtp.timeweb.ru',
            'SMTP_PORT': 587,
            'EMAIL': 'admin@ar-ucheba.ru',
            'PASSWORD': 'gxgmsdt4s9',
            'ALERT_EMAIL': 'nicksrnk@gmail.com',
            'DJANGO_API_URL': 'http://83.222.9.213:9999/api/fire-detection/',
            'API_TIMEOUT': 5,
            'ALERT_COOLDOWN': 300,
            'VIDEO_SOURCE': 'fire_video.mp4'  # –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã (0) –∏–ª–∏ RTSP-–ø–æ—Ç–æ–∫
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        self.model = YOLO(self.config['YOLO_MODEL'])
        self.last_alert_time = 0

    def prepare_frame_data(self, frame):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        _, buffer = cv2.imencode('.jpg', cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        return base64.b64encode(buffer).decode('utf-8')

    def send_to_django(self, alert_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Django API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π base64"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            _, buffer = cv2.imencode('.jpg', alert_data['frame'])
            frame_b64 = base64.b64encode(buffer).decode('utf-8')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload
            payload = {
                "frame": frame_b64,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π base64 –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                "confidence": alert_data["confidence"],
                "detection_type": alert_data["detection_type"],
                "coordinates": alert_data["coordinates"],
                "detection_time": alert_data["timestamp"]
            }
            
            response = requests.post(
                self.config['DJANGO_API_URL'],
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=self.config['API_TIMEOUT']
            )
            
            if response.status_code == 201:
                return response.json()
            raise Exception(f"API Error {response.status_code}: {response.text}")
        except Exception as e:
            logger.error(f"Django API Error: {str(e)}")
            return None

    def send_email_alert(self, alert_data, django_response):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Django"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Å—å–º–∞
            msg = MIMEMultipart()
            msg['From'] = f"Fire Detection <{self.config['EMAIL']}>"
            msg['To'] = self.config['ALERT_EMAIL']
            msg['Subject'] = "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ"
            
            # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Django API
            image_url = f"{self.config['DJANGO_API_URL'].rsplit('/', 2)[0]}/events/{django_response['event_id']}/image/"
            
            # HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
            html_content = f"""
            <html>
                <body>
                    <h2>–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–∂–∞—Ä–æ–≤</h2>
                    <p><strong>–¢–∏–ø:</strong> {alert_data['detection_type']}</p>
                    <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> {alert_data['confidence']:.2%}</p>
                    <p><strong>–í—Ä–µ–º—è:</strong> {datetime.fromisoformat(alert_data['timestamp']).strftime('%Y-%m-%d %H:%M:%S')}</p>
                    <p><strong>ID —Å–æ–±—ã—Ç–∏—è:</strong> {django_response['event_id']}</p>
                    <p><a href="{image_url}">–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º</a></p>
                    <p>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <a href="{self.config['DJANGO_API_URL'].rsplit('/', 2)[0]}">—Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</a></p>
                </body>
            </html>
            """
            
            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º HTML –≤–µ—Ä—Å–∏—é
            msg.attach(MIMEText(html_content, 'html', 'utf-8'))
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ HTML
            text_content = f"""
            –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–∂–∞—Ä–æ–≤
            –¢–∏–ø: {alert_data['detection_type']}
            –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {alert_data['confidence']:.2%}
            –í—Ä–µ–º—è: {datetime.fromisoformat(alert_data['timestamp']).strftime('%Y-%m-%d %H:%M:%S')}
            ID —Å–æ–±—ã—Ç–∏—è: {django_response['event_id']}
            –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}
            """
            msg.attach(MIMEText(text_content, 'plain', 'utf-8'))
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
            with smtplib.SMTP(self.config['SMTP_SERVER'], self.config['SMTP_PORT']) as server:
                server.starttls()
                server.login(self.config['EMAIL'], self.config['PASSWORD'])
                server.send_message(msg)
            
            logger.info(f"Email alert sent with image link: {image_url}")
            return True
            
        except Exception as e:
            logger.error(f"Email sending failed: {str(e)}", exc_info=True)
            return False

    def process_frame(self, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞"""
        results = self.model(frame, classes=[0], conf=0.5)
        detection = None
        
        for result in results:
            for box in result.boxes:
                if box.conf[0] > 0.5:
                    detection = {
                        'frame': frame.copy(),
                        'confidence': float(box.conf[0]),
                        'detection_type': 'fire',
                        'coordinates': {
                            'x1': int(box.xyxy[0][0]),
                            'y1': int(box.xyxy[0][1]),
                            'x2': int(box.xyxy[0][2]),
                            'y2': int(box.xyxy[0][3])
                        },
                        'timestamp': datetime.now().isoformat()
                    }
                    logger.info(f"Fire detected with confidence: {box.conf[0]:.2f}")
        
        return detection

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("Starting Fire Detection Service")
        
        cap = cv2.VideoCapture(self.config['VIDEO_SOURCE'])
        if not cap.isOpened():
            logger.error("Error opening video source")
            return

        try:
            while True:
                ret, frame = cap.read()
                if not ret:
                    logger.warning("Video frame read error, restarting capture...")
                    cap.release()
                    time.sleep(5)
                    cap = cv2.VideoCapture(self.config['VIDEO_SOURCE'])
                    continue
                
                detection = self.process_frame(frame)
                
                if detection and (time.time() - self.last_alert_time) > self.config['ALERT_COOLDOWN']:
                    django_response = self.send_to_django(detection)
                    if django_response:
                        if self.send_email_alert(detection, django_response):
                            self.last_alert_time = time.time()
                
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                
        except KeyboardInterrupt:
            logger.info("Service stopped by user")
        except Exception as e:
            logger.error(f"Service error: {str(e)}")
        finally:
            cap.release()
            logger.info("Service stopped")

if __name__ == "__main__":
    service = FireDetectionService()
    service.run()